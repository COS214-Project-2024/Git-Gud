/**
 * @file IndustrialBuilding.h
 * @brief Header file for the IndustrialBuilding class, representing buildings used for industrial purposes.
 */

#ifndef INDUSTRIALBUILDING_H
#define INDUSTRIALBUILDING_H

#include "Building.h"
#include "Subject.h"

/**
 * @class IndustrialBuilding
 * @brief Class representing an industrial building used for manufacturing, energy, or technology purposes.
 * @details Inherits from the Building class and includes attributes such as size, number of stories, industry type, and pollution level.
 */
class IndustrialBuilding : public Building{
    
    private:
        /// @brief The size of the industrial building.
        int size;

        /// @brief The number of stories in the industrial building.
        int numStories;

        /// @brief The type of industry the building operates (e.g., MANUFACTURING, ENERGY, TECHNOLOGY).
        Industry industryType;

        /// @brief The level of pollution generated by the building.
        float pollutionLevel;
        
    public:

        /**
         * @brief Get the building type
         * @return string representing the building type
         */
        std::string getType() override;
        
        /**
         * @brief Get the size of the industrial building.
         * @return int representing the size.
         */
        virtual int getSize();

        /**
         * @brief Get the number of stories of the industrial building.
         * @return int representing the number of stories.
         */
        virtual int getNumStories();

        /**
         * @brief Get the industry type of the industrial building.
         * @return Industry indicating the type of industry.
         */
        virtual Industry getIndustryType();

        /**
         * @brief Get the pollution level of the industrial building.
         * @return float representing the pollution level.
         */
        virtual float getPollutionLevel();

        /**
         * @brief Add employees to the industrial building.
         */
        virtual void addEmployees();

    //protected: Changed to accomadte construction in factory
        /**
         * @brief Constructor for creating an IndustrialBuilding with specified capacity, size, number of stories, industry type, and pollution level.
         * @param capacity The maximum number of occupants the building can hold.
         * @param size The size of the building.
         * @param numStories The number of stories in the building.
         * @param industryType The type of industry the building operates.
         * @param pollutionLevel The pollution level of the building.
         */
        IndustrialBuilding(int capacity, int size, int numStories, Industry industryType, int pollutionLevel);

        /**
         * @brief Constructor for creating an IndustrialBuilding with a specified state, capacity, size, number of stories, industry type, and pollution level.
         * @param s Unique pointer to the initial state of the building.
         * @param capacity The maximum number of occupants the building can hold.
         * @param size The size of the building.
         * @param numStories The number of stories in the building.
         * @param industryType The type of industry the building operates.
         * @param pollutionLevel The pollution level of the building.
         */
        IndustrialBuilding(std::unique_ptr<BuildingState> s, int capacity, int size, int numStories, Industry industryType, int pollutionLevel);

        /**
         * @brief Provide a service specific to the industrial building.
         */
        virtual void provideService() override;

        /**
         * @brief Get the cost of the industrial building.
         * @return float representing the cost of the building.
         */
        virtual float getCost() override;

        /**
         * @brief Clone the industrial building object.
         * @return IndustrialBuilding* Pointer to the cloned object.
         */
        virtual IndustrialBuilding* clone();

};


#endif // INDUSTRIALBUILDING_H